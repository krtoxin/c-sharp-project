@if (IsVisible)
{
    <div class="modal-backdrop"></div>
    <div class="call-modal">
        <div class="video-container">
            <video id="remoteVideo" autoplay playsinline></video>
            <video id="localVideo" autoplay muted playsinline class="local-video"></video>
        </div>

        <div class="call-controls mt-3">
            <button class="btn btn-outline-secondary me-2" @onclick="ToggleMic">
                @(micOn ? "🎤 Mic On" : "🔇 Mic Off")
            </button>

            <button class="btn btn-outline-secondary me-2" @onclick="ToggleCamera">
                @(camOn ? "📷 Cam On" : "📷 Cam Off")
            </button>

            <button class="btn btn-danger" @onclick="OnClose">End Call</button>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsVideo { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    [Inject] private IJSRuntime JS { get; set; }

    private bool micOn = true;
    private bool camOn = true;

    private bool shouldInit = false;

    protected override Task OnParametersSetAsync()
    {
        if (IsVisible)
            shouldInit = true;

        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldInit)
        {
            shouldInit = false;
            await Task.Delay(200); // give the DOM time to render
            await JS.InvokeVoidAsync("startCall", IsVideo);
        }
    }

    private async Task ToggleMic()
    {
        micOn = !micOn;
        await JS.InvokeVoidAsync("toggleMic", micOn);
    }

    private async Task ToggleCamera()
    {
        camOn = !camOn;
        await JS.InvokeVoidAsync("toggleCamera", camOn);
    }
}
