@using StudyBuddy.Services.IServices
@inject IReminderService ReminderService
@inject AuthenticationStateProvider AuthProvider

@if (IsOpen)
{
    <div class="reminder-modal-overlay">
        <div class="reminder-modal position-relative">
            <button type="button" class="reminder-close" @onclick="CloseModal" aria-label="Close">
                <span>&times;</span>
            </button>

            <h5 class="mb-4">Add Reminder</h5>

            <div>
                <label>Custom Message</label>
                <input @bind="CustomMessage" placeholder="E.g. Study math!" />
            </div>

            <div>
                <label>Remind At</label>
                <input type="datetime-local"
                       value="@formattedRemindAt"
                       @onchange="HandleRemindAtChange" />
            </div>

            <div>
                <label>Notify Before</label>
                <select @bind="NotifyMinutesBefore">
                    <option value="5">5 minutes</option>
                    <option value="15">15 minutes</option>
                    <option value="30">30 minutes</option>
                    <option value="60">1 hour</option>
                </select>
            </div>

            <div class="d-flex justify-content-end mt-3">
                <button class="btn btn-primary" @onclick="Submit">Save</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    private string CustomMessage { get; set; } = string.Empty;
    private DateTime RemindAt { get; set; } = DateTime.Now.AddMinutes(30);
    private int NotifyMinutesBefore { get; set; } = 60;

    private string formattedRemindAt => RemindAt.ToString("yyyy-MM-ddTHH:mm");

    private Task HandleRemindAtChange(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var parsed))
        {
            RemindAt = parsed;
        }
        return Task.CompletedTask;
    }

    private async Task Submit()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst("nameid")?.Value;
        if (string.IsNullOrEmpty(userId))
        {
            return;
        }

        var dto = new StudyBuddy.Core.DTOs.ReminderDto
            {
                UserId = userId,
                CustomMessage = CustomMessage,
                RemindAt = RemindAt,
                NotifyMinutesBefore = NotifyMinutesBefore,
                TaskId = null 
            };

        await ReminderService.CreateReminderAsync(dto);
        await CloseModal();
    }

    private async Task CloseModal()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(false);

        // Reset form
        CustomMessage = string.Empty;
        RemindAt = DateTime.Now.AddMinutes(30);
        NotifyMinutesBefore = 60;
    }
}
