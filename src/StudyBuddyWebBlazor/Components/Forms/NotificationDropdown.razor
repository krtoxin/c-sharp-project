@using StudyBuddy.Services.IServices
@inject AuthenticationStateProvider AuthProvider
@inject IReminderService ReminderService

@if (IsOpen)
{
    <div class="notification-dropdown" @onclick:stopPropagation="true">
        <h6>Reminders</h6>

        @if (Notifications.Any())
        {
            @foreach (var note in Notifications)
            {
                <div class="notification-item">
                    <div>
                        <strong>@(note.CustomMessage ?? "Reminder!")</strong><br />
                        <small>@note.RemindAt.ToLocalTime().ToString("g")</small>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="notification-item">
                <em>No new notifications</em>
            </div>
        }
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }

    private List<Reminder> Notifications = new();

    protected override async Task OnParametersSetAsync()
    {
        if (IsOpen)
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst("nameid")?.Value;
            if (string.IsNullOrEmpty(userId))
            {
                Notifications = new List<Reminder>();
                return;
            }

            Notifications = (await ReminderService.GetUpcomingRemindersAsync(userId))
                .Where(r => !r.IsSent) 
                .OrderByDescending(r => r.RemindAt)
                .Take(5)
                .ToList();
        }
    }

}
