@page "/register"
@using System.ComponentModel.DataAnnotations
@using StudyBuddy.Core.DTOs
@using StudyBuddyWebBlazor.Services
@inject ApiUserService UserService
@inject NavigationManager NavigationManager

<style>
    .register-container {
        background-color: #2c2f33;
        color: #ffffff;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }

    .register-box {
        background-color: #23272a;
        padding: 2rem;
        border-radius: 8px;
        width: 350px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.4);
    }

        .register-box h2 {
            text-align: center;
            margin-bottom: 1.5rem;
        }

    .form-control {
        background-color: #2c2f33;
        border: 1px solid #7289da;
        color: #fff;
    }

        .form-control:focus {
            border-color: #99aab5;
            box-shadow: none;
            outline: none;
        }

    .btn-register {
        width: 100%;
        background-color: #7289da;
        border: none;
        padding: 0.6rem;
        color: white;
        font-weight: bold;
        border-radius: 5px;
        transition: background-color 0.3s;
    }

        .btn-register:hover {
            background-color: #5b6eae;
        }

    .error {
        color: #f04747;
        margin-bottom: 1rem;
        text-align: center;
    }

    .login-link {
        text-align: center;
        margin-top: 1rem;
    }

        .login-link a {
            color: #7289da;
            text-decoration: none;
        }

            .login-link a:hover {
                text-decoration: underline;
            }
</style>


<div class="register-container">
    <div class="register-box">
        <h2>Create Account</h2>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="error">@ErrorMessage</div>
        }

        <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label>Full Name</label>
                <InputText @bind-Value="registerModel.FullName" class="form-control" />
            </div>

            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="registerModel.UserName" class="form-control" />
            </div>

            <div class="mb-3">
                <label>Email</label>
                <InputText @bind-Value="registerModel.Email" class="form-control" />
            </div>

            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="registerModel.Password" type="password" class="form-control" />
            </div>

            <button type="submit" class="btn-register">Register</button>
        </EditForm>

        <div class="login-link">
            Already have an account? <a href="/login">Login</a>
        </div>
    </div>
</div>

@code {
    private RegisterDto registerModel = new();
    private string? ErrorMessage;

    private async Task HandleRegister()
    {
        var result = await UserService.RegisterAsync(registerModel);
        if (!result.IsSuccess)
        {
            ErrorMessage = string.Join(", ", result.Errors);
        }
        else
        {
            ErrorMessage = null;
            NavigationManager.NavigateTo("/login");
        }
    }
}
