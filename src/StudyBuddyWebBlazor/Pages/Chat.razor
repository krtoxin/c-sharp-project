@page "/chat/{RoomId:int}"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.JSInterop
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@using StudyBuddy.Core.DTOs
@using StudyBuddy.Services.IServices
@using StudyBuddy.Services.Services
@inject IChatRoomService ChatRoomService
@inject NavigationManager Navigation
@inject ProtectedLocalStorage _localStorage
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JS
@inject ChatStateService ChatState
@implements IDisposable

<h3>Чат кімната @RoomId</h3>

<p><strong>Current User ID:</strong> @CurrentUserId</p>

@if (connection == null)
{
    <p>🔄 Підключення до чату...</p>
}
else
{
    <div class="chat-container">
        <div class="messages" @ref="messagesDiv">
            @foreach (var msg in Messages)
            {
                <div class="message @(msg.SenderId == CurrentUserId ? "mine" : "theirs")">
                    <strong>@(msg.SenderId == CurrentUserId ? "Ви" : msg.SenderName):</strong> @msg.Content
                </div>
            }
        </div>

        <div class="input-area">
            <input @bind="NewMessage" @bind:event="oninput" placeholder="Введіть повідомлення..." class="form-control" @onkeydown="HandleKeyDown" />
            <button class="btn btn-primary" @onclick="SendMessage" disabled="@string.IsNullOrWhiteSpace(NewMessage)">Надіслати</button>
        </div>
    </div>
}

@code {
    [Parameter] public int RoomId { get; set; }

    private HubConnection? connection;
    private string? NewMessage;
    private string CurrentUserId = "";
    private string AccessToken = "";
    private bool _disposed = false;

    private ElementReference messagesDiv;

    private List<ChatMessageDto> Messages => ChatState.GetMessages(RoomId);

    protected override async Task OnParametersSetAsync()
    {
        if (_disposed)
            return;

        // Clear old messages for the new room to prevent duplicates
        ChatState.ClearMessages(RoomId);

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        CurrentUserId = user?.FindFirst("nameid")?.Value ?? user?.FindFirst("id")?.Value ?? "unknown";

        AccessToken = user?.Claims.FirstOrDefault(c => c.Type == "access_token")?.Value ?? "";
        if (string.IsNullOrWhiteSpace(AccessToken))
        {
            var session = await _localStorage.GetAsync<AuthResultDto>("sessionState");
            AccessToken = (session.Success && session.Value is not null) ? session.Value.Token : "";
        }

        Console.WriteLine($"AccessToken length: {AccessToken?.Length ?? 0}");
        if (string.IsNullOrWhiteSpace(AccessToken))
        {
            Console.WriteLine("❌ AccessToken is missing — user may not be authenticated.");
            return;
        }

        // Load existing messages from server via service
        var existingMessages = await ChatRoomService.GetMessagesForRoomAsync(RoomId);
        foreach (var msg in existingMessages.OrderBy(m => m.SentAt))
        {
            ChatState.AddMessage(RoomId, msg);
        }

        connection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chatHub"), options =>
            {
                options.AccessTokenProvider = () => Task.FromResult<string?>(AccessToken);
            })
            .WithAutomaticReconnect()
            .Build();

        connection.On<string, string, string>("NewMessage", async (message, taskId, senderId) =>
        {
            ChatState.AddMessage(RoomId, new ChatMessageDto
                {
                    Content = message,
                    SenderId = senderId,
                    SenderName = senderId // replace with real name if you have it
                });

            await InvokeAsync(StateHasChanged);
            await ScrollToBottom();
        });

        try
        {
            await connection.StartAsync();
            await connection.InvokeAsync("JoinChat", RoomId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ SignalR connection failed: {ex.Message}");
        }
    }

    private async Task SendMessage()
    {
        if (connection == null || connection.State != HubConnectionState.Connected)
        {
            Console.WriteLine("❌ Cannot send: no active SignalR connection.");
            return;
        }
        if (string.IsNullOrWhiteSpace(NewMessage))
            return;

        await connection.InvokeAsync("SendMessage", RoomId, NewMessage, null);
        NewMessage = "";
        await ScrollToBottom();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(NewMessage))
            await SendMessage();
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(50);
        if (!_disposed && messagesDiv.Context != null)
        {
            try
            {
                await JS.InvokeVoidAsync("blazorHelpers.scrollToBottom", messagesDiv);
            }
            catch (JSDisconnectedException)
            {
                // Ignore - user disconnected or circuit disposed
            }
        }
    }

    public void Dispose()
    {
        _disposed = true;

        if (connection != null)
        {
            _ = connection.DisposeAsync();
            connection = null;
        }
    }
}
