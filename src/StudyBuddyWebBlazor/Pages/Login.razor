@page "/login"
@inject NavigationManager Navigation
@inject ApiUserService UserService
@inject CustomAuthenticationStateProvider AuthProvider
@using StudyBuddy.Core.DTOs
@using Blazored.LocalStorage


<div class="login-wrapper">
    <div class="login-container">
        <img src="img/studylogo.svg" alt="StudyBuddy Logo" class="login-logo" />
        <div class="login-card">
            <h3 class="login-title">Login</h3>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="error-message">@ErrorMessage</div>
            }

            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <label class="login-label">Username or Email</label>
                <InputText class="login-input" @bind-Value="loginModel.Identifier" placeholder="Enter username or email" />

                <label class="login-label">Password</label>
                <InputText type="password" class="login-input" @bind-Value="loginModel.Password" placeholder="Enter password" />

                <button type="submit" class="login-button">Login</button>
            </EditForm>

            <button class="google-button" @onclick="LoginWithGoogle">Login with Google</button>
            <div class="login-footer mt-2">
                <a href="/forgot-password" class="forgot-link">Forgot your password?</a>
            </div>

            <div class="login-footer">
                Don't have an account? <a href="/register">Register</a>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginDto loginModel = new();
    private string? ErrorMessage;
    @inject NavigationManager Navigation
    @inject HttpClient Http
    @inject Blazored.LocalStorage.ILocalStorageService localStorage


    private async Task HandleLogin()
    {
        Console.WriteLine("Login button clicked");

        var response = await Http.PostAsJsonAsync("https://localhost:7295/api/auth/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<AuthResultDto>();
            await localStorage.SetItemAsync("accessToken", result.Token);

            await AuthProvider.MarkUserAsAuthenticated(result); 

            Console.WriteLine("Redirecting...");
            Navigation.NavigateTo("/dashboard", true);
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Login failed: {error}");
            ErrorMessage = "Login failed. Please try again.";
        }
    }


    private void LoginWithGoogle()
    {
        Navigation.NavigateTo("/auth/external-login", true);
    }
}
