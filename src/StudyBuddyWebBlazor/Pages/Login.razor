@page "/login"
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication.Google
@inject IHttpContextAccessor HttpContextAccessor
@using StudyBuddy.Core.DTOs
@inject ApiUserService UserService

<h3>🔐 Login</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Username or Email</label>
        <InputText class="form-control" @bind-Value="loginModel.Identifier" />
    </div>

    <div class="mb-3">
        <label>Password</label>
        <InputText type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

<p class="mt-3">
    <button class="btn btn-danger" @onclick="LoginWithGoogle">Login with Google</button>
</p>

<p>
    Don't have an account? <a href="/register">Register</a>
</p>

@code {
    private LoginDto loginModel = new();
    private string? ErrorMessage;

    private async Task HandleLogin()
    {
        var result = await UserService.LoginAsync(loginModel);
        if (!result.IsSuccess)
        {
            ErrorMessage = string.Join(", ", result.Errors);
        }
        else
        {
            Navigation.NavigateTo("/dashboard", true);
        }
    }

    private async Task LoginWithGoogle()
    {
        var redirectUrl = Navigation.BaseUri.TrimEnd('/') + "/dashboard";
        var props = new AuthenticationProperties { RedirectUri = redirectUrl };
        await HttpContextAccessor.HttpContext!.ChallengeAsync(GoogleDefaults.AuthenticationScheme, props);
    }
}
