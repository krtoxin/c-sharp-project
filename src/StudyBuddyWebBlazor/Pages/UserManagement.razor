@page "/user-management"
@inject IUserRepository UserRepository
@inject IRoleRepository RoleRepository
@using Microsoft.AspNetCore.Authorization
@using StudyBuddy.Repositories.Interfaces
@using StudyBuddy.Core.Entities
@attribute [Authorize(Roles = "Admin")]

<h2>👥 User Management</h2>

@if (users == null || roles == null)
{
    <p>Loading users...</p>
}
else
{
    <table class="admin-table">
        <thead>
            <tr>
                <th>Full Name</th>
                <th>Email</th>
                <th>Username</th>
                <th>Current Role</th>
                <th>Change Role</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.FullName</td>
                    <td>@user.Email</td>
                    <td>@user.UserName</td>
                    <td>@user.Role?.Name</td>
                    <td>
                        <select class="admin-select" @onchange="async e => await ChangeRole(user.Id, int.Parse(e.Value!.ToString()))">
                            @foreach (var role in roles)
                            {
                                <option value="@role.Id" selected="@(user.RoleId == role.Id)">
                                    @role.Name
                                </option>
                            }
                        </select>
                    </td>
                    <td>
                        <button class="admin-delete-btn" @onclick="() => DeleteUser(user.Id)">🗑 Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<User> users = new();
    private List<Role> roles = new();

    protected override async Task OnInitializedAsync()
    {
        users = (await UserRepository.GetAllWithRolesAsync()).ToList();
        roles = (await RoleRepository.GetAllAsync()).ToList();
    }

    private async Task ChangeRole(string userId, int roleId)
    {
        var user = await UserRepository.GetByIdAsync(userId);
        if (user != null)
        {
            user.RoleId = roleId;
            await UserRepository.UpdateAsync(user);
            await RefreshUsers();
        }
    }

    private async Task DeleteUser(string userId)
    {
        var user = await UserRepository.GetByIdAsync(userId);
        if (user != null)
        {
            await UserRepository.DeleteAsync(user);
            await RefreshUsers();
        }
    }

    private async Task RefreshUsers()
    {
        users = (await UserRepository.GetAllWithRolesAsync()).ToList();
        StateHasChanged();
    }
}
