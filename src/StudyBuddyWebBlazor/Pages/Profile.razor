@page "/profile"
@using StudyBuddy.Services.IServices
@inject IUserService UserService
@inject AuthenticationStateProvider AuthProvider
@using Microsoft.AspNetCore.Components.Forms
@using StudyBuddy.Core.Entities
@inject NavigationManager Navigation
@inject IJSRuntime JS


<div class="profile-card">
    <div class="profile-avatar">
        <img src="@GetAvatarSource()" alt="avatar" />
        <label for="avatarUpload" class="edit-icon"><i class="bi bi-pencil-fill"></i></label>
        <InputFile id="avatarUpload" style="display:none;" OnChange="OnAvatarChange" />
    </div>

    @if (!string.IsNullOrWhiteSpace(CurrentUser?.DisplayName))
    {
        <h2 class="profile-name">@CurrentUser!.DisplayName</h2>
        <div class="profile-username">@($"@{CurrentUser.UserName}")</div>
    }
    else
    {
        <h2 class="profile-name">@CurrentUser?.FullName</h2>
        <div class="profile-username">@($"@{CurrentUser?.UserName}")</div>
    }

    <div class="profile-email">@CurrentUser?.Email</div>

    @if (CurrentUser?.IsPremiumUser == true)
    {
        <div class="badge-premium">
            💎 Premium User 💎
            <div class="premium-date">
                Untill: @CurrentUser.PremiumUntil?.ToLocalTime().ToString("dd.MM.yyyy")
            </div>
        </div>
    }
    else
    {
        <div class="badge-free">
            Free User
            <button class="btn-sm btn-primary" @onclick="UpgradeToPremium">Upgrade</button>
        </div>
    }

    <div class="profile-role">@CurrentUser?.Role?.Name</div>

    <div class="profile-section">
        <button class="btn-glow" @onclick="() => IsEditingDisplayName = true">Edit Display Name</button>
        <button class="btn-glow-outline" @onclick="ShowPasswordModal">Change Password</button>
    </div>

    @if (IsEditingDisplayName)
    {
        <div class="edit-name-box">
            <InputText class="form-input" @bind-Value="CurrentUser!.DisplayName" placeholder="Enter new display name" />
            <div class="form-actions">
                <button class="btn-primary" @onclick="SaveDisplayName">Save</button>
                <button class="btn-secondary" @onclick="() => IsEditingDisplayName = false">Cancel</button>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(StatusMessage))
    {
        <div class="status-message">@StatusMessage</div>
    }
</div>

@if (ShowPasswordChange)
{
    <div class="modal-backdrop" @onclick="() => ShowPasswordChange = false"></div>
    <div class="modal-container" @onclick:stopPropagation>
        <div class="modal-header">
            <h5>Change Password</h5>
            <button class="close-btn" @onclick="() => ShowPasswordChange = false">&times;</button>
        </div>
        <div class="modal-body">
            <EditForm Model="PasswordForm" OnValidSubmit="ChangePassword">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <label>Current Password</label>
                <InputText class="form-input" type="password" @bind-Value="PasswordForm.CurrentPassword" />

                <label class="mt-2">New Password</label>
                <InputText class="form-input" type="password" @bind-Value="PasswordForm.NewPassword" />

                <label class="mt-2">Confirm New Password</label>
                <InputText class="form-input" type="password" @bind-Value="PasswordForm.ConfirmPassword" />

                <button class="btn-primary mt-3" type="submit">Save</button>
            </EditForm>
        </div>
    </div>
}

@code {
    private User? CurrentUser;
    private string? StatusMessage;
    private bool IsEditingDisplayName = false;
    private bool ShowPasswordChange = false;
    private IBrowserFile? AvatarFile;

    private class PasswordModel
    {
        public string CurrentPassword { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    private PasswordModel PasswordForm = new();

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthProvider.GetAuthenticationStateAsync();
        var userId = auth.User.FindFirst("nameid")?.Value;
        if (!string.IsNullOrEmpty(userId))
        {
            CurrentUser = await UserService.GetByIdAsync(userId);
        }
    }

    private async Task OnAvatarChange(InputFileChangeEventArgs e)
    {
        AvatarFile = e.File;

        if (CurrentUser != null && AvatarFile != null)
        {
            var result = await UserService.SaveAvatarAsync(CurrentUser.Id, AvatarFile);
            StatusMessage = result.IsSuccess ? "Avatar updated." : result.Errors.FirstOrDefault();
            CurrentUser = await UserService.GetByIdAsync(CurrentUser.Id);
            AvatarFile = null;
        }
    }


    private string GetAvatarSource()
    {
        if (CurrentUser?.ProfileImageData != null && !string.IsNullOrEmpty(CurrentUser.ProfileImageMimeType))
        {
            var base64 = Convert.ToBase64String(CurrentUser.ProfileImageData);
            return $"data:{CurrentUser.ProfileImageMimeType};base64,{base64}";
        }

        return "/img/default-avatar.jpg";
    }

    private async Task SaveDisplayName()
    {
        if (CurrentUser != null)
        {
            await UserService.UpdateAsync(CurrentUser);

            if (AvatarFile != null)
            {
                var avatarResult = await UserService.SaveAvatarAsync(CurrentUser.Id, AvatarFile);
                StatusMessage = avatarResult.IsSuccess ? "Avatar and display name updated." : avatarResult.Errors.FirstOrDefault();
            }
            else
            {
                StatusMessage = "Display name updated.";
            }

            CurrentUser = await UserService.GetByIdAsync(CurrentUser.Id);
            AvatarFile = null;
            IsEditingDisplayName = false;
        }
    }

    private async Task UpgradeToPremium()
    {
        await JS.InvokeVoidAsync("openInNewTab", "https://send.monobank.ua/jar/4yZ9Td6Ve5");

        if (CurrentUser != null)
        {
            CurrentUser.IsPremiumUser = true;
            CurrentUser.PremiumUntil = DateTime.UtcNow.AddMonths(1);
            await UserService.UpdateAsync(CurrentUser);
            StatusMessage = "🎉 You are now a Premium user!";
        }
    }


    private void ShowPasswordModal() => ShowPasswordChange = true;

    private Task ChangePassword()
    {
        if (PasswordForm.NewPassword != PasswordForm.ConfirmPassword)
        {
            StatusMessage = "Passwords do not match.";
            return Task.CompletedTask;
        }

        ShowPasswordChange = false;
        StatusMessage = "Password changed successfully.";
        return Task.CompletedTask;
    }
}
