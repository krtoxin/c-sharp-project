@page "/subtopics"
@using StudyBuddy.Core.Entities
@using StudyBuddy.Services.IServices
@inject ISubTopicService SubTopicService
@inject ISubjectService SubjectService
@inject IJSRuntime JS
@attribute [Authorize(Roles = "Admin,Manager")]


<div class="subjects-wrapper">
    <div class="subjects-header">
        <h1><i class="bi bi-diagram-3-fill"></i> Subtopics</h1>
        <button class="btn-primary" @onclick="ShowAddForm">
            <i class="bi bi-plus-circle"></i> Add New Subtopic
        </button>
    </div>

    @if (showForm)
    {
        <div class="subjects-form">
            <EditForm Model="@subtopicForm" OnValidSubmit="HandleSave">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label>Title</label>
                    <InputText class="form-input" @bind-Value="subtopicForm.Title" />
                </div>

                <div class="form-group">
                    <label>Description</label>
                    <InputTextArea class="form-input" rows="3" @bind-Value="subtopicForm.Description" />
                </div>

                <div class="form-group">
                    <label>Subject</label>
                    <select class="form-input" @bind="subtopicForm.SubjectId">
                        <option disabled value="0">-- Select Subject --</option>
                        @foreach (var subj in subjects)
                        {
                            <option value="@subj.Id">@subj.Name</option>
                        }
                    </select>
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn-primary">Save</button>
                    <button type="button" class="btn-secondary" @onclick="Cancel">Cancel</button>
                </div>
            </EditForm>
        </div>
    }

    @if (subtopics == null)
    {
        <p>Loading...</p>
    }
    else if (!subtopics.Any())
    {
        <p>No subtopics yet. Start by adding one!</p>
    }
    else
    {
        <div class="subjects-table-wrapper">
            <table class="subjects-table">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Subject</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var sub in subtopics)
                    {
                        <tr>
                            <td>@sub.Title</td>
                            <td>@sub.Description</td>
                            <td>@subjects.FirstOrDefault(s => s.Id == sub.SubjectId)?.Name</td>
                            <td>
                                <button class="btn-sm btn-warning" @onclick="() => Edit(sub)">Edit</button>
                                <button class="btn-sm btn-danger" @onclick="() => Delete(sub.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<SubTopic>? subtopics;
    private List<Subject> subjects = new();
    private SubTopic subtopicForm = new();
    private bool showForm = false;
    private bool isEdit = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadSubjects();
        await LoadSubtopics();
    }

    private async Task LoadSubjects()
    {
        subjects = (await SubjectService.GetAllAsync()).ToList();
    }

    private async Task LoadSubtopics()
    {
        subtopics = (await SubTopicService.GetAllAsync()).ToList();
    }

    private void ShowAddForm()
    {
        subtopicForm = new SubTopic { Title = "", Description = "", SubjectId = 0 };
        isEdit = false;
        showForm = true;
    }

    private void Edit(SubTopic sub)
    {
        subtopicForm = new SubTopic
            {
                Id = sub.Id,
                Title = sub.Title,
                Description = sub.Description,
                SubjectId = sub.SubjectId
            };
        isEdit = true;
        showForm = true;
    }

    private async Task HandleSave()
    {
        if (isEdit)
            await SubTopicService.UpdateAsync(subtopicForm);
        else
            await SubTopicService.CreateAsync(subtopicForm);

        await LoadSubtopics();
        showForm = false;
    }

    private async Task Delete(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this subtopic?");
        if (confirmed)
        {
            await SubTopicService.DeleteAsync(id);
            await LoadSubtopics();
        }
    }

    private void Cancel()
    {
        showForm = false;
    }
}