@page "/rooms"
@using StudyBuddy.Core.Entities
@using StudyBuddy.Core.Enums
@using StudyBuddy.Services.IServices;
@using StudyBuddy.Services.Services;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@inject IChatRoomService ChatRoomService
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthProvider

@attribute [Authorize]

<h2 class="mb-4">🌐 My Chat Spaces</h2>

@if (rooms == null)
{
    <p>Loading rooms...</p>
}
else
{
    <div class="room-list-wrapper">
        <div class="d-flex justify-content-between align-items-center">
            <h4 class="mb-3">📁 Your Rooms</h4>
            <button class="btn btn-success" @onclick="() => ShowCreateForm = true">➕ New Room</button>
        </div>

        @if (!rooms.Any())
        {
            <p>No rooms yet. Create one to get started!</p>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>🎫 Name</th>
                            <th>👥 Group</th>
                            <th>🗓️ Created</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var room in rooms)
                        {
                            <tr>
                                <td>@room.Name</td>
                                <td>@(room.IsGroup ? "Yes" : "No")</td>
                                <td>@room.CreatedAt.ToLocalTime().ToShortDateString()</td>
                                <td>
                                    <button class="btn btn-sm btn-primary" @onclick="() => EnterRoom(room.Id)">Enter</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        @if (ShowCreateForm)
        {
            <EditForm Model="newRoom" OnValidSubmit="CreateRoom">
                <div class="card card-body mt-4">
                    <h5>Create a New Room</h5>

                    <div class="mb-3">
                        <label for="name">Room Name</label>
                        <InputText class="form-control" @bind-Value="newRoom.Name" />
                    </div>

                    <div class="mb-3 form-check">
                        <InputCheckbox class="form-check-input" @bind-Value="newRoom.IsGroup" />
                        <label class="form-check-label">Is Group Chat?</label>
                    </div>

                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary">Create Room</button>
                        <button type="button" class="btn btn-secondary" @onclick="() => ShowCreateForm = false">Cancel</button>
                    </div>
                </div>
            </EditForm>
        }
    </div>
}

@code {
    private List<ChatRoom>? rooms;
    private ChatRoom newRoom = new();
    private string currentUserId = string.Empty;
    private bool ShowCreateForm = false;

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthProvider.GetAuthenticationStateAsync();
        currentUserId = auth.User.FindFirst("id")?.Value ?? "";

        rooms = (await ChatRoomService.GetRoomsForUserAsync(currentUserId)).ToList();
    }

    private async Task CreateRoom()
    {
        await ChatRoomService.CreateRoomAsync(newRoom, currentUserId);
        ShowCreateForm = false;
        rooms = (await ChatRoomService.GetRoomsForUserAsync(currentUserId)).ToList();
        newRoom = new();
    }

    private void EnterRoom(int roomId)
    {
        Nav.NavigateTo($"/chat/{roomId}");
    }
}