@page "/tasks"
@inject ISubjectService SubjectService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@using StudyBuddy.Core.Entities
@using StudyBuddy.Services.IServices
@implements IDisposable

<div class="subjects-wrapper">
    <h2 class="subjects-header-title">📘 Choose a Subject</h2>

    @if (Subjects == null)
    {
        <p>Loading...</p>
    }
    else if (!Subjects.Any())
    {
        <p class="text-warning">⚠️ No subjects found.</p>
    }
    else
    {
        <div class="subject-card-grid">
            @foreach (var subj in Subjects)
            {
                <div class="subject-card" @onclick="() => NavigateToSubject(subj.Id)">
                    <div class="subject-card-icon">
                        <i class="@subj.Icon"></i>
                    </div>
                    <div class="subject-card-label">@subj.Name</div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<Subject> Subjects = new();
    private bool _disposed = false;

    protected override async Task OnInitializedAsync()
    {
        var subjects = await SubjectService.GetAllAsync();
        if (_disposed) return;

        Subjects = subjects.ToList();

        if (!_disposed)
            StateHasChanged(); 
    }

    private void NavigateToSubject(int id)
    {
        if (!_disposed)
            Navigation.NavigateTo($"/tasks/subject/{id}");
    }

    public void Dispose()
    {
        _disposed = true;
    }
}
