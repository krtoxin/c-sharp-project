@page "/task/{TaskId:int}"
@using StudyBuddy.Core.Entities
@using StudyBuddy.Core.Enums
@using Microsoft.AspNetCore.Components.Authorization
@using StudyBuddy.Services.IServices
@inject IStudyTaskService TaskService
@inject ITaskAttemptService AttemptService
@inject AuthenticationStateProvider AuthProvider

@implements IDisposable

<h3>Task Details</h3>

@if (Task == null)
{
    <p>Loading...</p>
}
else
{
    <div>
        <h4>@Task.Question</h4>

        @if (!string.IsNullOrEmpty(Task.ImageUrl))
        {
            <img src="@Task.ImageUrl" style="max-width: 300px;" />
        }

        <p><strong>Type:</strong> @Task.TaskType</p>

        @if (!HasAnsweredCorrectly || AllowRetry)
        {
            <EditForm Model="AnswerFormModel" OnValidSubmit="SubmitAnswer">
                @if (Task.TaskType == TaskType.OpenEnded)
                {
                    <InputText class="form-control" @bind-Value="UserInputText" />
                }
                else if (Task.TaskType == TaskType.MultipleChoice)
                {
                    @foreach (var opt in Task.Options)
                    {
                        <div>
                            <input type="checkbox" @onchange="e => ToggleOption(opt.Text, e.Value)" />
                            @opt.Text
                        </div>
                    }
                }
                else if (Task.TaskType == TaskType.OneAnswerTest)
                {
                    @foreach (var opt in Task.Options)
                    {
                        <div>
                            <input type="radio" name="one" value="@opt.Text" checked="@((SingleSelected == opt.Text))"
                                   @onchange="@(() => SelectSingleOption(opt.Text))" />
                            @opt.Text
                        </div>
                    }
                }

                <button class="btn btn-primary mt-2" type="submit">Submit</button>
            </EditForm>
        }
        else
        {
            <div class="alert alert-success mt-3">
                ✅ You've already answered this task correctly.
            </div>
            <button class="btn btn-secondary" @onclick="EnableRetry">Retry Task Anyway</button>
        }

        @if (AnswerSubmitted)
        {
            <p class="mt-3">
                <strong>@(AnswerCorrect ? "✅ Correct!" : "❌ Incorrect. Try again.")</strong>
            </p>
        }

        @if (TaskAttempts?.Count > 0)
        {
            <div class="mt-3">
                <strong>@(IsAdminOrManager ? "User Attempts:" : "Your Attempts:")</strong>
                <ul>
                    @foreach (var attempt in TaskAttempts)
                    {
                        <li>
                            @if (IsAdminOrManager)
                            {
                                <strong>@attempt.User.Email</strong>
                                <span> - </span>
                            }
                            @attempt.AttemptTime.ToLocalTime():
                            <span class="@(attempt.IsCorrect ? "text-success" : "text-danger")">
                                @(attempt.IsCorrect ? "✅ Correct" : "❌ Wrong")
                            </span>
                        </li>
                    }
                </ul>
            </div>
        }
    </div>
}

@code {
    [Parameter] public int TaskId { get; set; }

    private StudyTask? Task;
    private List<TaskAttempt> TaskAttempts = new();
    private bool IsAdminOrManager = false;
    private bool HasAnsweredCorrectly = false;
    private bool AllowRetry = false;

    private string UserInputText = string.Empty;
    private List<string> SelectedOptions = new();
    private string? SingleSelected;
    private bool AnswerSubmitted = false;
    private bool AnswerCorrect = false;
    private object AnswerFormModel = new();
    private bool _disposed = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        IsAdminOrManager = user.IsInRole("Admin") || user.IsInRole("Manager");

        Task = await TaskService.GetByIdAsync(TaskId);

        var userId = user.FindFirst("nameid")?.Value;

        if (!string.IsNullOrEmpty(userId))
        {
            TaskAttempts = IsAdminOrManager
                ? await AttemptService.GetAttemptsByTaskIdAsync(TaskId)
                : await AttemptService.GetAttemptsByUserAndTaskIdAsync(userId, TaskId);

            HasAnsweredCorrectly = TaskAttempts.Any(a => a.IsCorrect);
        }
    }

    private async Task SubmitAnswer()
    {
        if (Task == null) return;

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userId = user.FindFirst("nameid")?.Value;
        if (string.IsNullOrEmpty(userId)) return;

        bool correct = Task.TaskType switch
        {
            TaskType.OpenEnded => string.Equals(UserInputText?.Trim(), Task.CorrectAnswer?.Trim(), StringComparison.OrdinalIgnoreCase),
            TaskType.MultipleChoice => SelectedOptions.OrderBy(x => x).SequenceEqual(Task.Options.Where(o => o.IsCorrect).Select(o => o.Text).OrderBy(x => x)),
            TaskType.OneAnswerTest => Task.Options.Any(o => o.IsCorrect && o.Text == SingleSelected),
            _ => false
        };

        AnswerCorrect = correct;
        AnswerSubmitted = true;

        await AttemptService.SaveAttemptAsync(new TaskAttempt
            {
                TaskId = Task.Id,
                UserId = userId,
                IsCorrect = correct
            });

        TaskAttempts = await AttemptService.GetAttemptsByUserAndTaskIdAsync(userId, TaskId);
        HasAnsweredCorrectly = TaskAttempts.Any(a => a.IsCorrect);
        AllowRetry = false;
    }

    private void ToggleOption(string text, object? checkedValue)
    {
        bool isChecked = checkedValue is bool b && b;

        if (isChecked)
        {
            if (!SelectedOptions.Contains(text)) SelectedOptions.Add(text);
        }
        else
        {
            SelectedOptions.Remove(text);
        }
    }

    private void SelectSingleOption(string text)
    {
        SingleSelected = text;
    }

    private void EnableRetry()
    {
        AllowRetry = true;
        AnswerSubmitted = false;
        AnswerCorrect = false;
        UserInputText = string.Empty;
        SelectedOptions.Clear();
        SingleSelected = null;
    }

    public void Dispose()
    {
        _disposed = true;
    }
}
